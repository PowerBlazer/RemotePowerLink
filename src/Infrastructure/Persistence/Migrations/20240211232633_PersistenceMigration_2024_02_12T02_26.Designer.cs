// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20240211232633_PersistenceMigration_2024_02_12T02_26")]
    partial class PersistenceMigration_2024_02_12T02_26
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_identities");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identities_user_id");

                    b.HasIndex("UserId", "Title")
                        .HasDatabaseName("ix_identities_user_id_title");

                    b.ToTable("identities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "123",
                            Title = "Test1",
                            UserId = 2L,
                            Username = "root"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdentityId")
                        .HasColumnType("bigint")
                        .HasColumnName("identity_id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_proxies");

                    b.HasIndex("IdentityId")
                        .HasDatabaseName("ix_proxies_identity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_proxies_user_id");

                    b.HasIndex("UserId", "Title")
                        .HasDatabaseName("ix_proxies_user_id_title");

                    b.ToTable("proxies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IdentityId = 1L,
                            Ip = "123",
                            Port = 0,
                            Title = "Test1",
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Server", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdentityId")
                        .HasColumnType("bigint")
                        .HasColumnName("identity_id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<int?>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<long?>("ProxyId")
                        .HasColumnType("bigint")
                        .HasColumnName("proxy_id");

                    b.Property<long?>("ServerTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("server_type_id");

                    b.Property<string>("StartupCommand")
                        .HasColumnType("text")
                        .HasColumnName("startup_command");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_servers");

                    b.HasIndex("IdentityId")
                        .HasDatabaseName("ix_servers_identity_id");

                    b.HasIndex("ProxyId")
                        .HasDatabaseName("ix_servers_proxy_id");

                    b.HasIndex("ServerTypeId")
                        .HasDatabaseName("ix_servers_server_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_servers_user_id");

                    b.HasIndex("Title", "UserId")
                        .HasDatabaseName("ix_servers_title_user_id");

                    b.ToTable("servers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ServerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.HasKey("Id")
                        .HasName("pk_server_types");

                    b.ToTable("server_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Windows",
                            Photo = "/ServerTypes/windows.svg"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ArchLinux",
                            Photo = "/ServerTypes/arch-linux.svg"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "OpenSuse",
                            Photo = "/ServerTypes/opensuse.svg"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Fedora",
                            Photo = "/ServerTypes/fedora.svg"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CentOS",
                            Photo = "/ServerTypes/centos.svg"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Debian",
                            Photo = "/ServerTypes/debian.svg"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "MacOS",
                            Photo = "/ServerTypes/macos.svg"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Ubuntu",
                            Photo = "/ServerTypes/ubuntu.svg"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_id");

                    b.HasIndex("Username")
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 1L,
                            Username = "PowerBlaze"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identities_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany("Proxies")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proxies_identities_identity_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Proxies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proxies_users_user_id");

                    b.Navigation("Identity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Server", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany("Servers")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_identities_identity_id");

                    b.HasOne("Domain.Entities.Proxy", "Proxy")
                        .WithMany("Servers")
                        .HasForeignKey("ProxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_servers_proxies_proxy_id");

                    b.HasOne("Domain.Entities.ServerType", "ServerType")
                        .WithMany("Servers")
                        .HasForeignKey("ServerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_servers_server_types_server_type_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Servers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_users_user_id");

                    b.Navigation("Identity");

                    b.Navigation("Proxy");

                    b.Navigation("ServerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Navigation("Proxies");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.ServerType", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Identities");

                    b.Navigation("Proxies");

                    b.Navigation("Servers");
                });
#pragma warning restore 612, 618
        }
    }
}
