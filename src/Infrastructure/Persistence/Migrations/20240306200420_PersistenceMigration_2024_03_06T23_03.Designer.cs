// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20240306200420_PersistenceMigration_2024_03_06T23_03")]
    partial class PersistenceMigration_2024_03_06T23_03
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_identities");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identities_user_id");

                    b.HasIndex("UserId", "Title")
                        .HasDatabaseName("ix_identities_user_id_title");

                    b.ToTable("identities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123",
                            Title = "Test1",
                            UserId = 2L,
                            Username = "root"
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123",
                            Title = "Test1",
                            UserId = 1L,
                            Username = "root"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("IdentityId")
                        .HasColumnType("bigint")
                        .HasColumnName("identity_id");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<int?>("SshPort")
                        .HasColumnType("integer")
                        .HasColumnName("ssh_port");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_proxies");

                    b.HasIndex("IdentityId")
                        .HasDatabaseName("ix_proxies_identity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_proxies_user_id");

                    b.HasIndex("UserId", "Title")
                        .HasDatabaseName("ix_proxies_user_id_title");

                    b.ToTable("proxies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityId = 1L,
                            IpAddress = "123",
                            SshPort = 0,
                            Title = "Test1",
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Server", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<long>("IdentityId")
                        .HasColumnType("bigint")
                        .HasColumnName("identity_id");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<long?>("ProxyId")
                        .HasColumnType("bigint")
                        .HasColumnName("proxy_id");

                    b.Property<int?>("SshPort")
                        .HasColumnType("integer")
                        .HasColumnName("ssh_port");

                    b.Property<string>("StartupCommand")
                        .HasColumnType("text")
                        .HasColumnName("startup_command");

                    b.Property<long>("SystemTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("system_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_servers");

                    b.HasIndex("IdentityId")
                        .HasDatabaseName("ix_servers_identity_id");

                    b.HasIndex("ProxyId")
                        .HasDatabaseName("ix_servers_proxy_id");

                    b.HasIndex("SystemTypeId")
                        .HasDatabaseName("ix_servers_system_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_servers_user_id");

                    b.HasIndex("Title", "UserId")
                        .HasDatabaseName("ix_servers_title_user_id");

                    b.ToTable("servers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SystemType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IconPath")
                        .HasColumnType("text")
                        .HasColumnName("icon_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_system_types");

                    b.ToTable("system_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 2L,
                            IconPath = "/SystemTypes/windows.svg",
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 3L,
                            IconPath = "/SystemTypes/arch-linux.svg",
                            Name = "ArchLinux"
                        },
                        new
                        {
                            Id = 4L,
                            IconPath = "/SystemTypes/opensuse.svg",
                            Name = "OpenSuse"
                        },
                        new
                        {
                            Id = 5L,
                            IconPath = "/SystemTypes/fedora.svg",
                            Name = "Fedora"
                        },
                        new
                        {
                            Id = 6L,
                            IconPath = "/SystemTypes/centos.svg",
                            Name = "CentOS"
                        },
                        new
                        {
                            Id = 7L,
                            IconPath = "/SystemTypes/debian.svg",
                            Name = "Debian"
                        },
                        new
                        {
                            Id = 8L,
                            IconPath = "/SystemTypes/macos.svg",
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 9L,
                            IconPath = "/SystemTypes/ubuntu.svg",
                            Name = "Ubuntu"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_id");

                    b.HasIndex("Username")
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 1L,
                            Username = "PowerBlaze"
                        },
                        new
                        {
                            Id = 2L,
                            UserId = 2L,
                            Username = "PowerBlaze"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identities_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany("Proxies")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proxies_identities_identity_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Proxies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proxies_users_user_id");

                    b.Navigation("Identity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Server", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany("Servers")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_identities_identity_id");

                    b.HasOne("Domain.Entities.Proxy", "Proxy")
                        .WithMany("Servers")
                        .HasForeignKey("ProxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_servers_proxies_proxy_id");

                    b.HasOne("Domain.Entities.SystemType", "SystemType")
                        .WithMany("Servers")
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_system_types_system_type_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Servers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_users_user_id");

                    b.Navigation("Identity");

                    b.Navigation("Proxy");

                    b.Navigation("SystemType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Navigation("Proxies");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.Proxy", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.SystemType", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Identities");

                    b.Navigation("Proxies");

                    b.Navigation("Servers");
                });
#pragma warning restore 612, 618
        }
    }
}
