services:
  api:
    image: api
    build:
      context: .
      dockerfile: Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_URLS=http://+:6001
      - DB_APPLICATION_CONNECTION_STRING=${APP_CONN_STRING}
      - DB_IDENTITY_CONNECTION_STRING=${IDENT_CONN_STRING}
    ports:
      - "6001:6001"
    networks:
      - messenger_network
      
  postgres:
    container_name: postgres_db_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    expose:
      - "5433"
    ports:
      - "6002:5433"
    networks:
      - messenger_network
    restart: unless-stopped
    command: -p 5433

    rabbitmq:
      image: rabbitmq:3-management-alpine
      container_name: 'rabbitmq'
      hostname: rabbitmq
      restart: always
      environment:
        - RABBITMQ_DEFAULT_USER=root
        - RABBITMQ_DEFAULT_PASS=root
        - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
      ports:
        - "15672:15672"
        - "5672:5672"
      expose:
        - 15672
        - 5672
      networks:
        - messenger_network

    redis:
      image: "redis:alpine"
      command: redis-server --requirepass ${REDIS_PASS:-root}
      expose:
        - "6379"
      ports:
        - "6379:6379"
      volumes:
        - redis-data:/data
        - redis-conf:/usr/local/etc/redis/redis.conf
      networks:
        - messenger_network

    nginx:
      image: nginx
      tty: true
      ports:
        - 80:80
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
      environment:
        - NGINX_UID=1000
        - NGINX_GID=1000
      networks:
        - messenger_network

  networks:
    messenger_network:
      driver: bridge

  volumes:
    postgres:
    redis-data:
    redis-conf:
